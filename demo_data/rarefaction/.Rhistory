# data and packages
# install phyloseq package from biocmanager
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# BiocManager::install()
# BiocManager::install(c("phyloseq"))
library(phyloseq)
library(tidyverse)
library(vegan)
library(ggplot2)
################################################################################
# file in
otu_table_txt  = '/Users/songweizhi/Desktop/Archive/AllSamples_unoise_otu_table_willis.txt'
factor_txt     = '/Users/songweizhi/Desktop/Archive/fact_willis.txt'
color_code_txt = '/Users/songweizhi/Desktop/Archive/color_code.txt'
# file out
output_plot    = '/Users/songweizhi/Desktop/Archive/plot_demo.pdf'
################################################################################
# data preparation, OTU as rows
otu_raw <- read.delim(otu_table_txt, row.names = 1)
otu_raw <-t(otu_raw)
# check the lowest reads among all samples
rowSums(otu_raw)
raremax_raw <- min(rowSums(otu_raw))
# fit into rarecurve matrix and have a general look to make sure everything is correct
out1 <- rarecurve(otu_raw, step = 100, sample = raremax_raw, label = T )
# have a list each element corresponds to one sample
rare1 <- lapply(out1, function(x){
b <- as.data.frame(x)
b <- data.frame(OTU = b[,1], raw.read = rownames(b))
b$raw.read <- as.numeric(gsub("N", "",  b$raw.read))
return(b)
}) #clean the list up
# label the list
sample_names1 <- rownames(otu_raw)
names(rare1) <- sample_names1
# convert to data frame:
rare1 <- map_dfr(rare1, function(x){
z <- data.frame(x)
return(z)
}, .id = "sample")
head(rare1)
# make an additional column of groupings and colour according to that
group1 <- read.delim(factor_txt)
group1
group1 <- data.frame(group1)
group1
head(group1)
head(rare1)
group1
color_code_df <- read.delim(color_code_txt)
color_code_df
color_code_df <- data.frame(color_vector)
color_code_df
myData = read.delim(color_code_txt, header = FALSE)
myData
print(as.vector(myData))
rare1 <- map_dfr(group1$Sample_ID, function(x){ #loop over samples
z <- rare1[rare1$sample== x,] #subset rare according to sample
Sample <- group1$Sample[group1$Sample_ID == x] #subset groupings according to sample, if more than one grouping repeat for all
z <- data.frame(z, Sample) #make a new data frame with the subsets
return(z)
})
head(rare1)
p <- ggplot(data = rare1)+
geom_line(aes(x = raw.read, y = OTU, group = sample, color = Sample),linewidth =0.25)+ # color="black",, linetype=Compartment
#+scale_x_continuous(labels =  scales::scientific_format())
theme_bw()+
theme(
axis.ticks.x = element_line(linewidth =0.4, color='black'),
axis.ticks.y = element_line(linewidth =0.4, color = 'black'),
axis.ticks.length = unit(0.1, "cm"),
axis.title.y = element_text(size = 8.5, angle = 90,face = "bold",color = 'black'),
axis.title.x = element_text(size = 8.5, face = "bold",color = 'black'),
axis.text.x = element_text(size = 8, face = "plain",color = 'black'),
axis.text.y = element_text(size = 8,hjust = 1, face = "plain",color = 'black'),
panel.spacing = unit(0.4, "lines"),
panel.border = element_rect(colour = "black", fill=NA, linewidth =0.4),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
# legend style
# legend.background = element_rect(colour = 'black', fill = 'white', linetype='solid', size =0.3),
legend.title=element_text(size=8.5, face = "bold",color = 'black'),
legend.text = element_text(size=8, face = "plain",color = 'black'),
legend.margin=margin(1.5,3,1.5,3),
legend.background=element_blank(),
# legend.box.background = element_rect(color = 'black',linewidth  = 0.4),
legend.box.background = element_blank(),
# legend.box.margin=margin(0,0,-10,0),
legend.key.size = unit(0.4, "cm"),
legend.spacing.x = unit(0.1, 'cm'),
legend.position  = 'right',
legend.key = element_rect(colour = "transparent", fill = NA),
legend.spacing.y = unit(0.1, 'cm'),
aspect.ratio=1)+
scale_colour_manual(values=as.character(color_code_df)) +
labs( y = "Number of ASVs", x='Number of sequences',color = " Sample", aspect.ratio=1)
p
print(as.character(color_code_df))
# head(rare1)
ggsave(filename=output_plot, plot = p, device = cairo_pdf, width =100, height =70, units = "mm")
# plot a rarefaction curve with ggplot
# https://stackoverflow.com/questions/47234809/coloring-rarefaction-curve-lines-by-metadata-vegan-package-phyloseq-package
# data and packages
# install phyloseq package from biocmanager
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# BiocManager::install()
# BiocManager::install(c("phyloseq"))
library(phyloseq)
library(tidyverse)
library(vegan)
library(ggplot2)
################################################################################
# file in
otu_table_txt  = '/Users/songweizhi/Desktop/Archive/AllSamples_unoise_otu_table_willis.txt'
factor_txt     = '/Users/songweizhi/Desktop/Archive/fact_willis.txt'
color_code_txt = '/Users/songweizhi/Desktop/Archive/color_code.txt'
# file out
output_plot    = '/Users/songweizhi/Desktop/Archive/plot_demo.pdf'
################################################################################
# data preparation, OTU as rows
otu_raw <- read.delim(otu_table_txt, row.names = 1)
otu_raw <-t(otu_raw)
# check the lowest reads among all samples
rowSums(otu_raw)
raremax_raw <- min(rowSums(otu_raw))
# fit into rarecurve matrix and have a general look to make sure everything is correct
out1 <- rarecurve(otu_raw, step = 100, sample = raremax_raw, label = T )
# have a list each element corresponds to one sample
rare1 <- lapply(out1, function(x){
b <- as.data.frame(x)
b <- data.frame(OTU = b[,1], raw.read = rownames(b))
b$raw.read <- as.numeric(gsub("N", "",  b$raw.read))
return(b)
}) #clean the list up
# label the list
sample_names1 <- rownames(otu_raw)
names(rare1) <- sample_names1
# convert to data frame:
rare1 <- map_dfr(rare1, function(x){
z <- data.frame(x)
return(z)
}, .id = "sample")
head(rare1)
# make an additional column of groupings and colour according to that
group1 <- read.delim(factor_txt)
group1
group1 <- data.frame(group1)
group1
head(group1)
head(rare1)
group1
color_code_df <- read.delim(color_code_txt)
color_code_df
color_code_df <- data.frame(color_vector)
color_code_df
myData = read.delim(color_code_txt, header = FALSE)
myData
print(as.vector(myData))
rare1 <- map_dfr(group1$Sample_ID, function(x){ #loop over samples
z <- rare1[rare1$sample== x,] #subset rare according to sample
Sample <- group1$Sample[group1$Sample_ID == x] #subset groupings according to sample, if more than one grouping repeat for all
z <- data.frame(z, Sample) #make a new data frame with the subsets
return(z)
})
head(rare1)
p <- ggplot(data = rare1)+
geom_line(aes(x = raw.read, y = OTU, group = sample, color = Sample),linewidth =0.25)+ # color="black",, linetype=Compartment
#+scale_x_continuous(labels =  scales::scientific_format())
theme_bw()+
theme(
axis.ticks.x = element_line(linewidth =0.4, color='black'),
axis.ticks.y = element_line(linewidth =0.4, color = 'black'),
axis.ticks.length = unit(0.1, "cm"),
axis.title.y = element_text(size = 8.5, angle = 90,face = "bold",color = 'black'),
axis.title.x = element_text(size = 8.5, face = "bold",color = 'black'),
axis.text.x = element_text(size = 8, face = "plain",color = 'black'),
axis.text.y = element_text(size = 8,hjust = 1, face = "plain",color = 'black'),
panel.spacing = unit(0.4, "lines"),
panel.border = element_rect(colour = "black", fill=NA, linewidth =0.4),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
# legend style
# legend.background = element_rect(colour = 'black', fill = 'white', linetype='solid', size =0.3),
legend.title=element_text(size=8.5, face = "bold",color = 'black'),
legend.text = element_text(size=8, face = "plain",color = 'black'),
legend.margin=margin(1.5,3,1.5,3),
legend.background=element_blank(),
# legend.box.background = element_rect(color = 'black',linewidth  = 0.4),
legend.box.background = element_blank(),
# legend.box.margin=margin(0,0,-10,0),
legend.key.size = unit(0.4, "cm"),
legend.spacing.x = unit(0.1, 'cm'),
legend.position  = 'right',
legend.key = element_rect(colour = "transparent", fill = NA),
legend.spacing.y = unit(0.1, 'cm'),
aspect.ratio=1)+
scale_colour_manual(values=as.character(color_code_df)) +
labs( y = "Number of ASVs", x='Number of sequences',color = " Sample", aspect.ratio=1)
p
print(as.character(color_code_df))
# head(rare1)
ggsave(filename=output_plot, plot = p, device = cairo_pdf, width =100, height =70, units = "mm")
# plot a rarefaction curve with ggplot
# https://stackoverflow.com/questions/47234809/coloring-rarefaction-curve-lines-by-metadata-vegan-package-phyloseq-package
# data and packages
# install phyloseq package from biocmanager
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# BiocManager::install()
# BiocManager::install(c("phyloseq"))
library(phyloseq)
library(tidyverse)
library(vegan)
library(ggplot2)
################################################################################
# file in
otu_table_txt  = '/Users/songweizhi/Desktop/Archive/AllSamples_unoise_otu_table_willis.txt'
factor_txt     = '/Users/songweizhi/Desktop/Archive/fact_willis.txt'
color_code_txt = '/Users/songweizhi/Desktop/Archive/color_code.txt'
# file out
output_plot    = '/Users/songweizhi/Desktop/Archive/plot_demo.pdf'
################################################################################
# data preparation, OTU as rows
otu_raw <- read.delim(otu_table_txt, row.names = 1)
otu_raw <-t(otu_raw)
# check the lowest reads among all samples
rowSums(otu_raw)
raremax_raw <- min(rowSums(otu_raw))
# fit into rarecurve matrix and have a general look to make sure everything is correct
out1 <- rarecurve(otu_raw, step = 100, sample = raremax_raw, label = T )
# have a list each element corresponds to one sample
rare1 <- lapply(out1, function(x){
b <- as.data.frame(x)
b <- data.frame(OTU = b[,1], raw.read = rownames(b))
b$raw.read <- as.numeric(gsub("N", "",  b$raw.read))
return(b)
}) #clean the list up
# label the list
sample_names1 <- rownames(otu_raw)
names(rare1) <- sample_names1
# convert to data frame:
rare1 <- map_dfr(rare1, function(x){
z <- data.frame(x)
return(z)
}, .id = "sample")
head(rare1)
# make an additional column of groupings and colour according to that
group1 <- read.delim(factor_txt)
group1
group1 <- data.frame(group1)
group1
head(group1)
head(rare1)
group1
color_code_df <- read.delim(color_code_txt)
color_code_df
color_code_df <- data.frame(color_vector)
color_code_df
myData = read.delim(color_code_txt, header = FALSE)
myData
print(as.vector(myData))
rare1 <- map_dfr(group1$Sample_ID, function(x){ #loop over samples
z <- rare1[rare1$sample== x,] #subset rare according to sample
Sample <- group1$Sample[group1$Sample_ID == x] #subset groupings according to sample, if more than one grouping repeat for all
z <- data.frame(z, Sample) #make a new data frame with the subsets
return(z)
})
head(rare1)
p <- ggplot(data = rare1)+
geom_line(aes(x = raw.read, y = OTU, group = sample, color = Sample),linewidth =0.25)+ # color="black",, linetype=Compartment
#+scale_x_continuous(labels =  scales::scientific_format())
theme_bw()+
theme(
axis.ticks.x = element_line(linewidth =0.4, color='black'),
axis.ticks.y = element_line(linewidth =0.4, color = 'black'),
axis.ticks.length = unit(0.1, "cm"),
axis.title.y = element_text(size = 8.5, angle = 90,face = "bold",color = 'black'),
axis.title.x = element_text(size = 8.5, face = "bold",color = 'black'),
axis.text.x = element_text(size = 8, face = "plain",color = 'black'),
axis.text.y = element_text(size = 8,hjust = 1, face = "plain",color = 'black'),
panel.spacing = unit(0.4, "lines"),
panel.border = element_rect(colour = "black", fill=NA, linewidth =0.4),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
# legend style
# legend.background = element_rect(colour = 'black', fill = 'white', linetype='solid', size =0.3),
legend.title=element_text(size=8.5, face = "bold",color = 'black'),
legend.text = element_text(size=8, face = "plain",color = 'black'),
legend.margin=margin(1.5,3,1.5,3),
legend.background=element_blank(),
# legend.box.background = element_rect(color = 'black',linewidth  = 0.4),
legend.box.background = element_blank(),
# legend.box.margin=margin(0,0,-10,0),
legend.key.size = unit(0.4, "cm"),
legend.spacing.x = unit(0.1, 'cm'),
legend.position  = 'right',
legend.key = element_rect(colour = "transparent", fill = NA),
legend.spacing.y = unit(0.1, 'cm'),
aspect.ratio=1)+
#scale_colour_manual(values=c('Sponge' ='#4E9D5B', 'Coral'= '#9F4487')) +
scale_colour_manual(values=as.character(color_code_df)) +
labs( y = "Number of ASVs", x='Number of sequences',color = " Sample", aspect.ratio=1)
p
# head(rare1)
ggsave(filename=output_plot, plot = p, device = cairo_pdf, width =100, height =70, units = "mm")
# plot a rarefaction curve with ggplot
# https://stackoverflow.com/questions/47234809/coloring-rarefaction-curve-lines-by-metadata-vegan-package-phyloseq-package
# data and packages
# install phyloseq package from biocmanager
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# BiocManager::install()
# BiocManager::install(c("phyloseq"))
library(phyloseq)
library(tidyverse)
library(vegan)
library(ggplot2)
################################################################################
# file in
otu_table_txt  = '/Users/songweizhi/Desktop/Archive/AllSamples_unoise_otu_table_willis.txt'
factor_txt     = '/Users/songweizhi/Desktop/Archive/fact_willis.txt'
color_code_txt = '/Users/songweizhi/Desktop/Archive/color_code.txt'
# file out
output_plot    = '/Users/songweizhi/Desktop/Archive/plot_demo.pdf'
################################################################################
# data preparation, OTU as rows
otu_raw <- read.delim(otu_table_txt, row.names = 1)
otu_raw <-t(otu_raw)
# check the lowest reads among all samples
rowSums(otu_raw)
raremax_raw <- min(rowSums(otu_raw))
# fit into rarecurve matrix and have a general look to make sure everything is correct
out1 <- rarecurve(otu_raw, step = 100, sample = raremax_raw, label = T )
# have a list each element corresponds to one sample
rare1 <- lapply(out1, function(x){
b <- as.data.frame(x)
b <- data.frame(OTU = b[,1], raw.read = rownames(b))
b$raw.read <- as.numeric(gsub("N", "",  b$raw.read))
return(b)
}) #clean the list up
# label the list
sample_names1 <- rownames(otu_raw)
names(rare1) <- sample_names1
# convert to data frame:
rare1 <- map_dfr(rare1, function(x){
z <- data.frame(x)
return(z)
}, .id = "sample")
head(rare1)
# make an additional column of groupings and colour according to that
group1 <- read.delim(factor_txt)
group1
group1 <- data.frame(group1)
group1
head(group1)
head(rare1)
group1
color_code_df <- read.delim(color_code_txt)
color_code_df
color_code_df <- data.frame(color_vector)
color_code_df
myData = read.delim(color_code_txt, header = FALSE)
myData
print(as.vector(myData))
rare1 <- map_dfr(group1$Sample_ID, function(x){ #loop over samples
z <- rare1[rare1$sample== x,] #subset rare according to sample
Sample <- group1$Sample[group1$Sample_ID == x] #subset groupings according to sample, if more than one grouping repeat for all
z <- data.frame(z, Sample) #make a new data frame with the subsets
return(z)
})
head(rare1)
p <- ggplot(data = rare1)+
geom_line(aes(x = raw.read, y = OTU, group = sample, color = Sample),linewidth =0.25)+ # color="black",, linetype=Compartment
#+scale_x_continuous(labels =  scales::scientific_format())
theme_bw()+
theme(
axis.ticks.x = element_line(linewidth =0.4, color='black'),
axis.ticks.y = element_line(linewidth =0.4, color = 'black'),
axis.ticks.length = unit(0.1, "cm"),
axis.title.y = element_text(size = 8.5, angle = 90,face = "bold",color = 'black'),
axis.title.x = element_text(size = 8.5, face = "bold",color = 'black'),
axis.text.x = element_text(size = 8, face = "plain",color = 'black'),
axis.text.y = element_text(size = 8,hjust = 1, face = "plain",color = 'black'),
panel.spacing = unit(0.4, "lines"),
panel.border = element_rect(colour = "black", fill=NA, linewidth =0.4),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
# legend style
# legend.background = element_rect(colour = 'black', fill = 'white', linetype='solid', size =0.3),
legend.title=element_text(size=8.5, face = "bold",color = 'black'),
legend.text = element_text(size=8, face = "plain",color = 'black'),
legend.margin=margin(1.5,3,1.5,3),
legend.background=element_blank(),
# legend.box.background = element_rect(color = 'black',linewidth  = 0.4),
legend.box.background = element_blank(),
# legend.box.margin=margin(0,0,-10,0),
legend.key.size = unit(0.4, "cm"),
legend.spacing.x = unit(0.1, 'cm'),
legend.position  = 'right',
legend.key = element_rect(colour = "transparent", fill = NA),
legend.spacing.y = unit(0.1, 'cm'),
aspect.ratio=1)+
#scale_colour_manual(values=c('Sponge' ='#4E9D5B', 'Coral'= '#9F4487')) +
scale_colour_manual(values=as.character(color_code_df)) +
labs( y = "Number of ASVs", x='Number of sequences',color = " Sample", aspect.ratio=1)
p
# head(rare1)
ggsave(filename=output_plot, plot = p, device = cairo_pdf, width =100, height =70, units = "mm")
# plot a rarefaction curve with ggplot
# https://stackoverflow.com/questions/47234809/coloring-rarefaction-curve-lines-by-metadata-vegan-package-phyloseq-package
# data and packages
# install phyloseq package from biocmanager
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# BiocManager::install()
# BiocManager::install(c("phyloseq"))
library(phyloseq)
library(tidyverse)
library(vegan)
library(ggplot2)
################################################################################
# file in
otu_table_txt  = '/Users/songweizhi/Desktop/Archive/AllSamples_unoise_otu_table_willis.txt'
factor_txt     = '/Users/songweizhi/Desktop/Archive/fact_willis.txt'
color_code_txt = '/Users/songweizhi/Desktop/Archive/color_code.txt'
# file out
output_plot    = '/Users/songweizhi/Desktop/Archive/plot_demo.pdf'
################################################################################
# data preparation, OTU as rows
otu_raw <- read.delim(otu_table_txt, row.names = 1)
otu_raw <-t(otu_raw)
# check the lowest reads among all samples
rowSums(otu_raw)
raremax_raw <- min(rowSums(otu_raw))
# fit into rarecurve matrix and have a general look to make sure everything is correct
out1 <- rarecurve(otu_raw, step = 100, sample = raremax_raw, label = T )
# have a list each element corresponds to one sample
rare1 <- lapply(out1, function(x){
b <- as.data.frame(x)
b <- data.frame(OTU = b[,1], raw.read = rownames(b))
b$raw.read <- as.numeric(gsub("N", "",  b$raw.read))
return(b)
}) #clean the list up
# label the list
sample_names1 <- rownames(otu_raw)
names(rare1) <- sample_names1
# convert to data frame:
rare1 <- map_dfr(rare1, function(x){
z <- data.frame(x)
return(z)
}, .id = "sample")
head(rare1)
# make an additional column of groupings and colour according to that
group1 <- read.delim(factor_txt)
group1
group1 <- data.frame(group1)
group1
head(group1)
head(rare1)
group1
color_code_df <- read.delim(color_code_txt)
color_code_df
color_code_df <- data.frame(color_vector)
color_code_df
myData = read.delim(color_code_txt, header = FALSE)
myData
print(as.vector(myData))
rare1 <- map_dfr(group1$Sample_ID, function(x){ #loop over samples
z <- rare1[rare1$sample== x,] #subset rare according to sample
Sample <- group1$Sample[group1$Sample_ID == x] #subset groupings according to sample, if more than one grouping repeat for all
z <- data.frame(z, Sample) #make a new data frame with the subsets
return(z)
})
head(rare1)
p <- ggplot(data = rare1)+
geom_line(aes(x = raw.read, y = OTU, group = sample, color = Sample),linewidth =0.25)+ # color="black",, linetype=Compartment
#+scale_x_continuous(labels =  scales::scientific_format())
theme_bw()+
theme(
axis.ticks.x = element_line(linewidth =0.4, color='black'),
axis.ticks.y = element_line(linewidth =0.4, color = 'black'),
axis.ticks.length = unit(0.1, "cm"),
axis.title.y = element_text(size = 8.5, angle = 90,face = "bold",color = 'black'),
axis.title.x = element_text(size = 8.5, face = "bold",color = 'black'),
axis.text.x = element_text(size = 8, face = "plain",color = 'black'),
axis.text.y = element_text(size = 8,hjust = 1, face = "plain",color = 'black'),
panel.spacing = unit(0.4, "lines"),
panel.border = element_rect(colour = "black", fill=NA, linewidth =0.4),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
# legend style
# legend.background = element_rect(colour = 'black', fill = 'white', linetype='solid', size =0.3),
legend.title=element_text(size=8.5, face = "bold",color = 'black'),
legend.text = element_text(size=8, face = "plain",color = 'black'),
legend.margin=margin(1.5,3,1.5,3),
legend.background=element_blank(),
# legend.box.background = element_rect(color = 'black',linewidth  = 0.4),
legend.box.background = element_blank(),
# legend.box.margin=margin(0,0,-10,0),
legend.key.size = unit(0.4, "cm"),
legend.spacing.x = unit(0.1, 'cm'),
legend.position  = 'right',
legend.key = element_rect(colour = "transparent", fill = NA),
legend.spacing.y = unit(0.1, 'cm'),
aspect.ratio=1)+
scale_colour_manual(values=c('Sponge' ='#4E9D5B', 'Coral'= '#9F4487')) +
labs( y = "Number of ASVs", x='Number of sequences',color = " Sample", aspect.ratio=1)
p
# head(rare1)
ggsave(filename=output_plot, plot = p, device = cairo_pdf, width =100, height =70, units = "mm")
